# MagicDoc Todo List

- Create Tests for current classes
- Document Self (MagicDoc should be able to eventually document itself ;)
- Write Unit Tests

Docs:
  TFModuleDocs:
    - Create Provisioned Project Resource List
    - Terraform Plan Example
    - Related Resources such as Key or Bucket Policies Produced
    - Make Notes and Images List Items to cycle through in the event more then 1 is required.
    - Make Notes have 1 extra property, all the the author to choose between the standard Note, Info, Tip, and Warning.
    - Allow the Icon for Note types etc to be set by user.
    - Validate that the config file is in the proper format, or autocreate one that is needed. If no config exists then auto create one.
  Completed:
  - Generate Table of Contents (1/31) [Done]
  - Generate Outputs (1/31) [Done]
  - Generate Output Examples (1/31) [Done]
  - Generate TFVars (1/31) [Done]

CLI:
  - Refactor Code into CLI Tool - (2-17-20)[Done]
  - Arguments:
    - ConfigFile - (2-17-20)[Done]
    - Github Token - (2-17-20)[Done]
  - Commands:
    - Generate Check for Graphviz and make the TF Plan Graph optional.
    - Generate Documentation - (2-17-20)[Done]
    - Generate Variable List - (2-17-20)[Done]
    - Generate TFVars File (pass tfvar file name and automatically add it to the environments directory) - (2-17-20)[Done]
    - Generate Usable Example
    - Generate Project ConfigFile - (2-17-20)[Done]
    - Generate ChangeLog File (Maybe grab directly from Github)
    - Generate .gitignore
    - Generate New Module (Run in empty directory and it will create common file such as variables.tf, main.tf, outputs.tf, etc..)
    - Generate Outputs (Can we call or easily find and scrape a terraform page with some beautify soup?) 
      - Yes, Terraform appears to have a standard https://www.terraform.io/docs/providers/aws/r/s3_bucket.html where the resource would be aws_s3_bucket so just remove aws_ from each of the resources and put in URL path.
    - Generate Github Action for the project.
    - Generate CloudFormation Template to instantiate Secure Bucket, IAM Role, DynamoTable etc..
  - WishList:
    - Securely Store Token (So it doesn't have to be provided on each run)
    - Allow User to supply their own Jinja Template, Document all collected data and available variables that can be used within the template. - (2-17-20)[Done]
    - Add Input Argument for TF Directory to run against (tf = Terraform(working_dir='/home/test') - (2-17-20)[Done]


PatchList:
  - create doc needs a backup flag that will toggle backups off.
  - create needs template option to allow passing custom template
  - Need to sync create capabilities with available option flags in the create command.
  - Patch the template, to not include either the Required Variables or Optional variable sections if no variables of that type are present.
  - Handle Outputs that have conditional values attached to them (Currently they make Jinja crash)
  - Template Update - Check if map has items or not, currently if a variable is defined that has a blank or no default, then Jinja tries to process it and fails because 
  its an empty object. (Parameter Groups Module)
  - Variables or Outputs could be empty, check to ensure that if the file has no content to skip the file
  


Handle datastructure like this:

```terraform
variable "instance_details" {
  description = "A map of names to objects describing each instance to build"
  type        = map(object({
    subnet_id            = string
    security_group_ids   = list(string)
    ami                  = string
    instance_type        = string
    os_type              = string
    key_name             = string
    tags                 = map(string)
    network_interfaces   = map(object({
      ip_address_count = number
      ip_addresses     = list(string)
    }))
    addl_ebs_volumes     = map(object({
      size             = number
      type             = string
      iops             = number
      snapshot_id      = string
      kms_key_id       = string
      device_name      = string
      cpm_backup       = string
    }))
    root_volume_type     = string
    root_volume_size     = number
    root_volume_iops     = number
    iam_instance_profile = string
    ebs_optimized        = bool
  }))
}
```

